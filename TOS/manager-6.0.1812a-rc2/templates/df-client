#!/bin/bash
#
# chkconfig: 2345 95 20
# description: Transwarp Manager service
#

<#noparse>
STATUS_RUNNING=0
STATUS_DEAD=1
STATUS_NOT_RUNNING=3
STATUS_WRONG_SYNTAX=101
STATUS_OTHER_ERROR=102
CLIENT_STOP_TIMEOUT=5

APP_USER=`whoami`
APP_NAME='df-client'
PID_FILE=/var/run/${APP_NAME}.pid

umask 0022

start() {
#   check the app status
    if [ -f $PID_FILE ]; then
        if kill -0 `cat $PID_FILE` > /dev/null 2>&1; then
            echo $APP_NAME already running as process `cat $PID_FILE`.  Stop it first.
            return ${STATUS_RUNNING}
        fi
    fi

#    if [ ! -w "${log.path}" ]; then
#       mkdir -p "${log.path}"
#       chmod 755 ${log.path}
#    fi

    echo "Starting $APP_NAME as a daemon..."
    AGENT=""
</#noparse>
<#assign
  tosService=dependencies.TOS
  registryServer=tosService.roles['TOS_REGISTRY'][0].hostname
  registryPort=tosService['tos.registry.port']
>
DF_CLIENT_PATH=/usr/lib/dragonfly/df-client
REGISTRY=https://${registryServer}:${registryPort}
#   start the app
    nohup dfdaemon --registry $REGISTRY -dfpath $DF_CLIENT_PATH/dfget &
<#noparse>
    echo $! > $PID_FILE

    if ! kill -0 $! > /dev/null 2>&1; then
        echo "[FAILED]"
#        echo "check "${log.path}/${app.name}.out" and "${log.path}/${app.name}.log" to see details"
        return ${STATUS_DEAD}
    else
        echo "[OK]"
    fi
}


stop() {
    if [ -f "$PID_FILE" ]; then
        PID=`cat $PID_FILE`
        if kill -0 $PID > /dev/null 2>&1; then
            echo "Stopping $APP_NAME..."
            kill $PID
            sleep $CLIENT_STOP_TIME
            if kill -0 $PID > /dev/null 2>&1; then
                 echo "$APP_NAME did not stop gracefully after $CLIENT_STOP_TIME seconds: killing with kill -9"
                 kill -9 $PID
            else
                echo "[OK]"
            fi
            rm -f $PID_FILE
        else
            echo no $APP_NAME to stop
        fi
    else
        echo no $APP_NAME to stop
    fi
}

status() {
    local PID="null"
    if [ -s $PID_FILE ]; then
        PID=$(cat $PID_FILE)
    else
        echo "$APP_NAME is NOT running"
        return ${STATUS_NOT_RUNNING}
    fi

    if [ -d /proc/$PID ]; then
        echo "$APP_NAME is running [$PID]"
        return ${STATUS_RUNNING}
    else
        echo "$APP_NAME is NOT running but pid file found"
        return ${STATUS_DEAD}
    fi
}


case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0  { start | stop | restart | status }"
        exit ${STATUS_WRONG_SYNTAX}
esac

exit $?
</#noparse>
