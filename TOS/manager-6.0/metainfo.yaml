---
name: TOS
version: manager-6.0
global: true
namePrefix: TOS
friendlyName: TOS
dependencies: []
user: root
roles:
- name: DF_CLIENT
  friendlyName: "DF Client"
  category: SLAVE
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  summaryPolicy: SOME
  autoAssign:
  - advice: !<EachNode> {}
  suggestion:
  - criteria: !<EachNode> {}
  validation:
  - criteria: !<Range> {"min": 0}
  operations:
  - type: Install
    directives:
    - directive: !<download>
        url: "${transwarpRepo}/tos/df-client.tar.gz"
        targetPath: "/etc/${service.sid}/conf/df-client.tar.gz"
    - directive: !<mkdirs>
        paths: ["/usr/lib/dragonfly"]
        mode: "755"
    - directive: !<mkdirs>
        paths: ["/etc/dragonfly/conf"]
        mode: "755"
    - directive: !<shell>
        script: "tar -zxvf /etc/${service.sid}/conf/df-client.tar.gz -C /usr/lib/dragonfly/"
    - directive: !<shell>
        script: "ln -sf /usr/lib/dragonfly/df-client/dfdaemon /usr/bin/dfdaemon"
  - type: Config
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "client.conf"
        targetPath: "/etc/dragonfly/conf/client.conf"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "df-client"
        targetPath: "/usr/bin/df-client"
        mode: "755"
    - directive: !<resource>
        templateType: Raw
        templatePath: "df-client.service"
        targetPath: "/usr/lib/systemd/system/df-client.service"
        mode: "755"
  - type: Start
    directives:
    - directive: !<systemctl>
        action: EnableStart
        service: df-client
        sleepSec: 2
  - type: Scaleout
    directives:
    - directive: !<systemctl>
        action: EnableStart
        service: df-client
        sleepSec: 2
  - type: Stop
    directives:
    - directive: !<systemctl>
        action: DisableStop
        service: df-client
        sleepSec: 2
  - type: Delete
    directives:
    - directive: !<systemctl>
        action: DisableStop
        service: df-client
        sleepSec: 2
    - directive: !<shell>
        script: "rm -rf /usr/lib/dragonfly/"
    - directive: !<shell>
        script: "rm -f /usr/bin/dfdaemon"

- name: DF_MASTER
  friendlyName: "DF Master"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  summaryPolicy: SOME
  autoAssign:
  - advice: !<NumSeq>
      numSeq: [3,2,1]
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 0}
  operations:
  - type: Install
    directives:
    - directive: !<download>
        url: "${transwarpRepo}/tos/df-master.tar.gz"
        targetPath: "/etc/${service.sid}/conf/df-master.tar.gz"
    - directive: !<shell>
        script: "docker load -i /etc/${service.sid}/conf/df-master.tar.gz"
    - directive: !<mkdirs>
        paths: ["/etc/dragonfly/conf"]
        mode: "755"
  - type: Config
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "nginx.conf"
        targetPath: "/etc/dragonfly/conf/nginx.conf"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "application.properties"
        targetPath: "/etc/dragonfly/conf/application.properties"
        mode: "755"
  - type: Start
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "dragonfly-master.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/dragonfly-master.manifest"
        mode: "755"
  - type: Scaleout
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "dragonfly-master.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/dragonfly-master.manifest"
        mode: "755"
  - type: Stop
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/dragonfly-master.manifest"
  - type: Delete
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/dragonfly-master.manifest"

- name: TOS_SLAVE
  friendlyName: "TOS Slave"
  category: SLAVE
  frontendOperations: ["Start", "Stop", "Scaleout"]
  summaryPolicy: SOME
  autoAssign:
  - advice: !<EachNode> {}
  suggestion:
  - criteria: !<EachNode> {}
  validation:
  - criteria: !<EachNode> {}
  operations:
  - type: Install
    directives:
    - directive: !<mkdirs>
        paths: ["/opt/kubernetes/bin/", "/var/log/kubernetes/", "/opt/kubernetes/manifests-multi", "/opt/kubernetes/registry-certs", "/etc/cni/net.d/"]
        mode: "755"
    - directive: !<mkdirs>
        paths: ["/var/run/${service.sid}"]
        mode: "755"
    - directive: !<mkdirs>
        paths: ["/srv/kubernetes"]
        mode: "700"
    - directive: !<download>
        url: "${transwarpRepo}/tos/tos.tar.gz"
        targetPath: "/etc/${service.sid}/conf/tos.tar.gz"
    - directive: !<shell>
        script: "docker load -i /etc/${service.sid}/conf/tos.tar.gz"
  - type: Config
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "kubernetes_master.sh"
        targetPath: "/etc/profile.d/kubernetes_master.sh"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "proxy.kubeconfig"
        targetPath: "/srv/kubernetes/kubeconfig"
        mode: "664"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "bootstrap.kubeconfig"
        targetPath: "/srv/kubernetes/bootstrap.kubeconfig"
        mode: "664"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "kubelet.service"
        targetPath: "/usr/lib/systemd/system/kubelet.service"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "haproxy.service"
        targetPath: "/usr/lib/systemd/system/haproxy.service"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "haproxy.cfg"
        targetPath: "/etc/${service.sid}/conf/haproxy.cfg"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "resolv.conf"
        targetPath: "/etc/transwarp/conf/resolv.conf"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "overlay.conf"
        targetPath: "/etc/cni/net.d/overlay.conf"
        mode: "755"
  - type: Bootstrap
    directives:
    - directive: !<systemctl>
        action: EnableStart
        service: haproxy
        sleepSec: 2
  - type: Start
    directives:
    - directive: !<shell>
        script: "docker run --volume /opt/kubernetes/registry-certs/:/srv/kubernetes/ -e EXTAR_OPTS=DNS:${localhostname}, --net=host transwarp/gencerts:manager-6.0 /usr/bin/entry.sh"
    - directive: !<systemctl>
        action: EnableStart
        service: haproxy
        sleepSec: 2
    - directive: !<systemctl>
        action: EnableStart
        service: kubelet
        sleepSec: 2
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-proxy.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-proxy.manifest"
        mode: "755"
  - type: Stop
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-proxy.manifest"
    - directive: !<systemctl>
        action: DisableStop
        service: kubelet
        sleepSec: 2
    - directive: !<systemctl>
        action: DisableStop
        service: haproxy
        sleepSec: 2
  - type: Scaleout
    directives:
    - directive: !<shell>
        script: "docker run --volume /opt/kubernetes/registry-certs/:/srv/kubernetes/ -e EXTAR_OPTS=DNS:${localhostname}, --net=host transwarp/gencerts:manager-6.0 /usr/bin/entry.sh"
    - directive: !<systemctl>
        action: EnableStart
        service: haproxy
        sleepSec: 2
    - directive: !<systemctl>
        action: EnableStart
        service: kubelet
        sleepSec: 2
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-proxy.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-proxy.manifest"
        mode: "755"
  - type: Delete
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-proxy.manifest"
    - directive: !<systemctl>
        action: DisableStop
        service: kubelet
        sleepSec: 2
    - directive: !<systemctl>
        action: DisableStop
        service: haproxy
        sleepSec: 2

- name: TOS_REGISTRY
  friendlyName: "TOS Registry"
  linkExpression: "http://${localhostname}:${service['tos.registry.ui.port']}/"
  category: SLAVE
  frontendOperations: ["Start", "Stop"]
  summaryPolicy: SOME
  autoAssign:
  - advice: !<NumSeq>
      numSeq: [1]
      mates: ["TRANSWARP_MANAGER_MASTER"] #REGISTRY_SERVER is strictly adhered to Manager
  suggestion:
  - criteria: !<Range> {"min": 1, "max": 1}
  validation:
  - criteria: !<Range> {"min": 1, "max": 1} #TODO must at TRANSWARP_MANAGER_MASTER nodes
  operations:
  - type: Install
    directives:
    - directive: !<mkdirs>
        paths: ["/srv/kubernetes"]
        mode: "700"
  - type: Config
    directives:
    - directive: !<resource>
        templateType: Raw
        templatePath: "config.yml"
        targetPath: "/etc/${service.sid}/conf/config.yml"
        mode: "755"
  - type: Start
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-registry.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-registry.manifest"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-registryui.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-registryui.manifest"
        mode: "755"
  - type: Stop
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-registry.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-registryui.manifest"
  - type: Delete
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-registry.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-registryui.manifest"

- name: TOS_MASTER
  friendlyName: "TOS Master"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Move", "Scaleout"]
  deleteOpCondition:
    deletable:
      number: 4
    movable:
      number: 3
    reject:
      number: 2
  summaryPolicy: SOME
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [3, 2, 1]}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations:
  - type: Install
    directives:
    - directive: !<mkdirs>
        paths: ["/var/run/${service.sid}", "/var/etcd/data"]
        mode: "755"
  - type: Config
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "kubeconfig"
        targetPath: "/srv/kubernetes/kubeconfig"
        mode: "600"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "auth"
        targetPath: "/srv/kubernetes/auth"
        mode: "600"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "audit-policy.yaml"
        targetPath: "/srv/kubernetes/audit-policy.yaml"
        mode: "600"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "token.csv"
        targetPath: "/srv/kubernetes/token.csv"
        mode: "600"
  - type: Start
    directives:
    - directive: !<systemctl>
        action: EnableStart
        service: kubelet
        sleepSec: 2
    - directive: !<systemctl>
        action: EnableStart
        service: haproxy
        sleepSec: 2
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-etcd.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-etcd.manifest"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-apiserver.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-apiserver.manifest"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-controller.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-controller.manifest"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-scheduler.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-scheduler.manifest"
        mode: "755"
  - type: Scaleout
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-etcd.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-etcd.manifest"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-apiserver.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-apiserver.manifest"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-controller.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-controller.manifest"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "tos-scheduler.manifest"
        targetPath: "/opt/kubernetes/manifests-multi/tos-scheduler.manifest"
        mode: "755"
  - type: Stop
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-etcd.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-apiserver.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-controller.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-scheduler.manifest"
  - type: Delete
    directives:
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-etcd.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-apiserver.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-controller.manifest"
    - directive: !<shell>
        script: "rm -f /opt/kubernetes/manifests-multi/tos-scheduler.manifest"

stages:
  - type: Bootstrap
    taskGroups:
    - !<Gen-TLS-Certs>
      summaryPolicy: ALL
      timeoutMinutes: 2
  - type: Config
    taskGroups:
    - !<Role>
      summaryPolicy: ALL
      timeoutMinutes: 2
      roleType: TOS_SLAVE
      operation: Config
    - !<Role>
      summaryPolicy: SOME
      timeoutMinutes: 2
      roleType: TOS_REGISTRY
      operation: Config
    - !<Role>
      summaryPolicy: ALL
      timeoutMinutes: 2
      roleType: TOS_MASTER
      operation: Config
    - !<Role>
      summaryPolicy: ALL
      timeoutMinutes: 2
      roleType: DF_MASTER
      operation: Config
    - !<Role>
      summaryPolicy: ALL
      timeoutMinutes: 2
      roleType: DF_CLIENT
      operation: Config
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 1
      templateType: Raw
      templateFile: "priority/high-priority.yaml"
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 1
      templateType: Raw
      templateFile: "priority/medium-priority.yaml"
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 1
      templateType: Raw
      templateFile: "priority/low-priority.yaml"
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 1
      templateType: Raw
      templateFile: "priority/system-priority.yaml"
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 1
      templateType: Raw
      templateFile: "rbac/clusterrole-rbac.yaml"
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 1
      templateType: Raw
      templateFile: "rbac/clusterrolebinding-rbac.yaml"
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 1
      templateType: Raw
      templateFile: "rbac/system-node-proxier.yaml"
    - !<Resource-on-Manager>
      summaryPolicy: ALL
      timeoutMinutes: 2
      templateType: FreeMarker
      templateFile: "nvidia-device-plugin-ds.yaml"
  - type: Start
    taskGroups:
    - !<Role>
      summaryPolicy: SOME
      timeoutMinutes: 2
      roleType: TOS_MASTER
      operation: Start
    - !<Role>
      summaryPolicy: ALL
      timeoutMinutes: 2
      roleType: TOS_SLAVE
      operation: Bootstrap
    - !<Kubectl>
      summaryPolicy: SOME
      timeoutMinutes: 2
      action: Start
      file: "priority/"
    - !<Kubectl>
      summaryPolicy: SOME
      timeoutMinutes: 2
      action: Start
      file: "rbac/"
    - !<Kubectl>
      summaryPolicy: SOME
      timeoutMinutes: 2
      action: Start
      file: "nvidia-device-plugin-ds.yaml"
    - !<Enable-Nvidia-Docker>
      summaryPolicy: SOME
      timeoutMinutes: 2
    - !<Role>
      summaryPolicy: SOME
      timeoutMinutes: 2
      roleType: TOS_SLAVE
      operation: Start
    - !<Role>
      summaryPolicy: SOME
      timeoutMinutes: 2
      roleType: TOS_REGISTRY
      operation: Start
    - !<Role>
      summaryPolicy: SOME
      timeoutMinutes: 2
      roleType: DF_MASTER
      operation: Start
    - !<Role>
      summaryPolicy: SOME
      timeoutMinutes: 2
      roleType: DF_CLIENT
      operation: Start
    - !<Wait-Healthy>
      summaryPolicy: ALL
      timeoutMinutes: 12


healthChecks:
- category: DAEMON_CHECK
  intervalSeconds: 5
  method: !<DockerPsAndSystemctl>
    imageMap:
      TOS_MASTER:
        DockerPs: ["etcd --data-d", "hyperkube apiserver", "hyperkube controller", "hyperkube scheduler"]
      TOS_REGISTRY:
        DockerPs: ["/entrypoint.sh", "/root/start-apa"]
      TOS_SLAVE:
        Systemctl: ["kubelet", "haproxy", "docker"]
      DF_MASTER:
        DockerPs: ["/root/start.sh"]
      DF_CLIENT:
        Systemctl: ["df-client"]
- category: VITAL_SIGN_CHECK
  intervalSeconds: 10
  method: !<Builtin> {}

firstWizardConfigs:
- tos.master.etcd.port
- tos.master.etcd.election.timeout
- tos.master.etcd.heartbeat.interval
- tos.master.leader.elect.port
- tos.master.apiserver.port
- tos.master.apiserver.secure.port
- tos.master.scheduler.port
- tos.master.controller.port
- tos.slave.kubelet.port
- tos.slave.kubelet.healthzport
- tos.master.dashboard.username
- tos.master.dashboard.password
- tos.registry.ui.port
- tos.registry.port
- service.cluster.ip.range
- cluster.dns.ip
- dragonfly.enabled
- dragonfly.supernode.tomcat.http.port
- dragonfly.supernode.nginx.peer.port
- dragonfly.supernode.nginx.rest.port
- nvidia.docker.support.enabled
