---
name: MONITOR
version: transwarp-6.0.1-rc0
global: true
namePrefix: Monitor
friendlyName: "Monitor"
dependencies: []
roles:
- name: MONITOR_PROMETHEUS
  friendlyName: "Prometheus"
  labelPrefix: "prometheus"
  dockerImage: "transwarp/prometheus:transwarp-6.0.1-rc0"
  linkExpression: "http://${localhostname}:${service['prometheus.port']}"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  env:
  - name: APISERVER_ADDR
    value: 10.10.10.1
  - name: ENABLE_IN_CLUSTER
    value: "false"
  - name: PROMETHEUS_PORT
    value: "${service['prometheus.port']}"
  - name: MONITOR_CONF_DIR
    value: /etc/${service.sid}/conf
  resources:
    limitsMemoryKey: prometheus.container.limits.memory
    limitsCpuKey: prometheus.container.limits.cpu
    requestsMemoryKey: prometheus.container.requests.memory
    requestsCpuKey: prometheus.container.requests.cpu
  summaryPolicy: SOME
  mountPaths:
  - mountPath: /srv/kubernetes
    hostPath: /srv/kubernetes
    name: certs
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [1]}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations: []
  deleteOpCleanDirs:
    fromConfig:
    - key: prometheus.data.dir
      featureFile: lock

- name: MONITOR_NODEEXPORTER
  friendlyName: "Nodeexporter"
  labelPrefix: "nodeexporter"
  dockerImage: "transwarp/node-exporter:transwarp-6.0.1-rc0"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  env:
  - name: NTP_SERVER
    value: "${service.roles.MONITOR_PROMETHEUS[0].hostname}"
  - name: NODEEXPORTER_PORT
    value: "${service['nodeexporter.port']}"
  mountPaths:
  - mountPath: /host/sys
    hostPath: /sys
    name: sys
  - mountPath: /host/proc
    hostPath: /proc
    name: proc
  resources:
    limitsMemoryKey: nodeexporter.container.limits.memory
    limitsCpuKey: nodeexporter.container.limits.cpu
    requestsMemoryKey: nodeexporter.container.requests.memory
    requestsCpuKey: nodeexporter.container.requests.cpu
  summaryPolicy: SOME
  autoAssign:
  - advice: !<EachNode> {}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations: []
- name: MONITOR_KUBE_METRICS
  friendlyName: "Kube Status Metrics"
  labelPrefix: "kubemetrics"
  dockerImage: "transwarp/kube-state-metrics:transwarp-6.0.1-rc0"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  env:
  - name: KUBE_METRICS_PORT
    value: "${service['kubemetrics.port']}"
  resources:
    limitsMemoryKey: kubemetrics.container.limits.memory
    limitsCpuKey: kubemetrics.container.limits.cpu
    requestsMemoryKey: kubemetrics.container.requests.memory
    requestsCpuKey: kubemetrics.container.requests.cpu
  summaryPolicy: SOME
  mountPaths:
  - mountPath: /srv/kubernetes
    hostPath: /srv/kubernetes
    name: certs
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [1]}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations: []
- name: MONITOR_GRAFANA
  friendlyName: "Grafana"
  labelPrefix: "grafana"
  dockerImage: "transwarp/grafana:transwarp-6.0.1-rc0"
  linkExpression: "http://${localhostname}:${service['grafana.port']}"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  env:
  - name: GRAFANA_PORT
    value: "${service['grafana.port']}"
  - name: PROMETHEUS_PORT
    value: "${service['prometheus.port']}"
  - name: PROMETHEUS_IP
    value: "${service.roles.MONITOR_PROMETHEUS[0].hostname}"
  mountPaths: []
  resources:
    limitsMemoryKey: grafana.container.limits.memory
    limitsCpuKey: grafana.container.limits.cpu
    requestsMemoryKey: grafana.container.requests.memory
    requestsCpuKey: grafana.container.requests.cpu
  summaryPolicy: SOME
  mountPaths: []
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [1]}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations: []
firstWizardConfigs:
- prometheus.data.dir
- prometheus.port
- prometheus.container.limits.memory
- prometheus.container.limits.cpu
- prometheus.container.requests.memory
- prometheus.container.requests.cpu
- nodeexporter.port
- nodeexporter.container.limits.memory
- nodeexporter.container.limits.cpu
- nodeexporter.container.requests.memory
- nodeexporter.container.requests.cpu
- kubemetrics.port
- kubemetrics.container.limits.memory
- kubemetrics.container.limits.cpu
- kubemetrics.container.requests.memory
- kubemetrics.container.requests.cpu
- grafana.port
- grafana.container.limits.memory
- grafana.container.limits.cpu
- grafana.container.requests.memory
- grafana.container.requests.cpu

pages:
- summary
- roles
- configuration
- operation


healthChecks:
- category: DAEMON_CHECK
  intervalSeconds: 30
  method: !<K8sPod> {}
#- category: VITAL_SIGN_CHECK
#  intervalSeconds: 10
#  method: !<Builtin> {e
