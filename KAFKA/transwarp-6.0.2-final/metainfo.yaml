---
name: KAFKA
version: transwarp-6.0.2-final
global: false
namePrefix: Kafka
friendlyName: "Kafka"
dependencies:
  - name: GUARDIAN
    minVersion: transwarp-6.0.2-final
    optional: true
  - name: ZOOKEEPER
    minVersion: transwarp-6.0.2-final
    maxVersion: transwarp-6.0.2-final
    optional: false
dockerImage: "transwarp/kafka:transwarp-6.0.2-final"
user: kafka
plugins:
  - provider: GUARDIAN
    version: 0.10.2+500.51250
    useTar: false
roles:
- name: KAFKA_SERVER
  friendlyName: "Kafka Server"
  labelPrefix: "kafka-server"
  category: SLAVE
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  deleteOpCondition:
    deletable:
      number: 2
    reject:
      number: 1
  env:
  - name: TRANSWARP_ZOOKEEPER_QUORUM
    value: |
      <#assign zookeepers=[]>
      <#if dependencies.ZOOKEEPER?? && dependencies.ZOOKEEPER.roles.ZOOKEEPER?? && dependencies.ZOOKEEPER.roles.ZOOKEEPER?size gt 0>
        <#list dependencies.ZOOKEEPER.roles.ZOOKEEPER as zookeeper>
          <#assign zookeepers += [zookeeper.hostname]>
        </#list>
      </#if>
      ${zookeepers?join(",")}
  - name: KAFKA_CONF_DIR
    value: /etc/${service.sid}/conf
  mountPaths: []
  resources:
    limitsMemoryKey: kafka.container.limits.memory
    limitsCpuKey: kafka.container.limits.cpu
    requestsMemoryKey: kafka.container.requests.memory
    requestsCpuKey: kafka.container.requests.cpu
  nodeSpecificMounts:
  - configKey: kmq.log.dirs
  summaryPolicy: SOME
  autoAssign:
  - advice: !<EachNode> {}
  suggestion:
  - criteria: !<EachNode> {}
  validation:
  - criteria: !<Range> {"min": 1}
  operations: []
- name: KAFKA_REST
  dockerImage: "transwarp/kafka-rest:transwarp-6.0.2-final"
  friendlyName: "Kafka Rest"
  labelPrefix: "kafka-rest"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  env:
  - name: KAFKA_REST_CONF_DIR
    value: /etc/${service.sid}/conf
  mountPaths: []
  nodeSpecificMounts: []
  summaryPolicy: SOME
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [0]}
  suggestion:
  - criteria: !<Range> {"min": 0}
  validation:
  - criteria: !<Range> {"min": 0}
  operations:
  - type: Config
    directives:
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "kafka-rest-env.sh"
        targetPath: "/etc/${service.sid}/conf/kafka-rest-env.sh"
        mode: "755"
    - directive: !<resource>
        templateType: FreeMarker
        templatePath: "kafka-rest.properties"
        targetPath: "/etc/${service.sid}/conf/kafka-rest.properties"
        mode: "755"

firstWizardConfigs:
- listeners
- advertised.listeners
- delete.topic.enable
- kmq.log.dirs
- zookeeper.connection.timeout.ms
- zookeeper.connection.timeout.ms
- kafka.broker.memory
- kafka.container.limits.memory
- kafka.container.limits.cpu
- kafka.container.requests.memory
- kafka.container.requests.cpu
- kafka.memory.ratio
- kafka.rest.port
- kafka.rest.memory

dashboardMetrics:
- AllTopicsBytesOutPerSec

pages:
- summary
- roles
- configuration
- operation
- security
- plugin

principals:
- kafka

healthChecks:
- category: DAEMON_CHECK
  intervalSeconds: 5
  method: !<K8sPod> {}
- category: VITAL_SIGN_CHECK
  intervalSeconds: 15
  method: !<Probe>
    roles:
    - roleType: KAFKA_SERVER
      from: !<dependency>
        depType: ZOOKEEPER
        roleType: ZOOKEEPER
        execOn: Each
        aggregate: Union
        command: |
          <#assign zkPort = dependencies.ZOOKEEPER["zookeeper.client.port"]>
          python -c "import os; import subprocess; import socket; import json
          FNULL = open(os.devnull, 'w')

          lsout = subprocess.check_output(['/usr/lib/zookeeper/bin/zkCli.sh', '-server', socket.gethostname() + ':${zkPort}', 'ls', '/brokers/ids'])
          for line in lsout.splitlines():
            try:
              ids = json.loads(line)
              break
            except:
              pass

          for id in ids:
            brokerout = subprocess.check_output(['/usr/lib/zookeeper/bin/zkCli.sh', '-server', socket.gethostname() + ':${zkPort}', 'get', '/brokers/ids/'+str(id)], stderr=FNULL)
            for line in brokerout.splitlines():
              try:
                broker = json.loads(line)
                for endpoint in broker[u'endpoints']:
                  print endpoint[endpoint.find(':')+3: endpoint.rfind(':')], 'SUCCESSFUL'
              except:
                pass
          "


customConfigFiles:
- server.properties
- kafka-rest.properties