# if local, run without tensorflow
dieu.backend = tensorflow

# if none, run on the local host
dieu.environment = k8s

# dieu docker image name should be with the following format:
dieu.docker.image.name = ${service['dieu.docker.image.name']}

# work instances in tensorflow dist mode
dieu.worker.instances = ${service['dieu.worker.instances']}

# parameter server instances in tensorflow dist mode
dieu.ps.instances = ${service['dieu.ps.instances']}

# submit yaml to api server
dieu.k8s.api.server = ${dependencies.TOS.roles.TOS_MASTER[0].hostname}:${dependencies.TOS["tos.master.apiserver.port"]}

# hdfs hosts (nn1,nn2)
<#assign namenodes=[]>
<#if dependencies.HDFS.nameservices?? && dependencies.HDFS.nameservices?size gt 0>
  <#list dependencies.HDFS.nameservices as ns>
    <#list dependencies.HDFS[ns]['HDFS_NAMENODE'] as namenode>
      <#assign namenodes += [namenode.hostname]>
    </#list>
  </#list>
<#else>
  <#assign namenodes += dependencies.HDFS.roles.HDFS_NAMENODE[0]['hostname']>
</#if>
dieu.hdfs.host = ${namenodes?join(",")}

# hadoop security authentication
dieu.hadoop.security.authentication = ${service.auth}

# kerberos enabled
dieu.krb.enable = <#if service.auth == "kerberos">true<#else>false</#if>

<#if service.auth = "kerberos">
# kinit hdfs keytab file
dieu.kinit.hdfs.keytab = ${service.keytab}

# kinit principal
dieu.kinit.principal = hive/${localhostname?lower_case}@${service.realm}
</#if>
# k8s namespace
dieu.k8s.namespace= ${service['dieu.k8s.namespace']}

dieu.running.timeout = ${service['dieu.running.timeout']}

# custom configurations
<#if service['dieu.conf']??>
<#list service['dieu.conf'] as key, value>
${key} = ${value}
</#list>
</#if>
