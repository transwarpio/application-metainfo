<#assign
  tosService=dependencies.TOS
  registryServer=tosService.roles['TOS_REGISTRY'][0].hostname
  registryPort=tosService['tos.registry.port']
>
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    name: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  replicas: ${service.roles.DASHBOARD?size}
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        name: kubernetes-dashboard
    spec:
      hostNetwork: true
      containers:
      - name: kubernetes-dashboard
        image: ${registryServer}:${registryPort}/transwarp/dashboard:transwarp-5.2.4-rc1
        imagePullPolicy: Always
        ports:
        - containerPort: ${service['tos.master.dashboard.port']}
          protocol: TCP
        args:
          # Uncomment the following line to manually specify Kubernetes API server Host
          # If not specified, Dashboard will attempt to auto discover the API server and connect
          # to it. Uncomment only if the default does not work.
          - /dashboard
          - --apiserver-host=https://${tosService.roles.TOS_MASTER[0].hostname}:${tosService['tos.master.apiserver.secure.port']}
          - --kubeconfig=/srv/kubernetes/kubeconfig
          - --port=${service['tos.master.dashboard.port']}
        livenessProbe:
          httpGet:
            path: /
            port: ${service['tos.master.dashboard.port']}
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
          limits:
            memory: "1Gi"
            cpu: "0.2"
          requests:
            memory: "0Gi"
            cpu: "0"
        volumeMounts:
        - mountPath: "/srv/kubernetes"
          name: "certs"
      nodeSelector:
        kubernetes-${service.sid}: "true"
      volumes:
      - hostPath:
          path: "/srv/kubernetes"
        name: "certs"
