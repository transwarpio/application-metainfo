#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

[users]
# List of users with their password allowed to access Zeppelin.
# To use a different strategy (LDAP / Database / ...) check the shiro doc at http://shiro.apache.org/configuration.html#Configuration-INISections
admin = password1, admin
user1 = password2, role1, role2
user2 = password3, role3
user3 = password4, role2
<#if service.auth = "kerberos">
<#if dependencies.GUARDIAN['cas.server.ssl.port']??>
# Sample LDAP configuration, for user Authentication, currently tested for single Realm
[main]
pamRealm=org.apache.zeppelin.realm.PamRealm
pamRealm.service=login
subjectFactory = io.buji.pac4j.subject.Pac4jSubjectFactory
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.subjectFactory = $subjectFactory
casRealm = io.buji.pac4j.realm.Pac4jRealm
securityManager.realms = $casRealm
securityManager.sessionManager = $sessionManager
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager
relativeUrlResolver = org.pac4j.core.http.RelativeUrlResolver
casConfig = io.transwarp.guardian.plugins.shiro.client.WrappedCasConfiguration
<#assign casServerSslPort=dependencies.GUARDIAN['cas.server.ssl.port']>
<#if dependencies.GUARDIAN['guardian.server.cas.server.host']?matches("^\\s*$")>
<#assign casServerName="https://${dependencies.GUARDIAN.roles.CAS_SERVER[0]['ip']}:${casServerSslPort}">
<#else>
<#assign casServerName="https://${dependencies.GUARDIAN['guardian.server.cas.server.host']}:${casServerSslPort}">
</#if>
casConfig.loginUrl = ${casServerName}${dependencies.GUARDIAN["cas.server.context.path"]}/login
casConfig.protocolString = CAS30_PROXY
# It is dangerous to set acceptAnyProxy
casConfig.acceptAnyProxy = true
casConfig.urlResolver = $relativeUrlResolver
# CAS receptor filter
casProxyReceptor = org.pac4j.cas.client.CasProxyReceptor
casProxyReceptor.name = casProxyReceptor
casProxyReceptor.callbackUrl = /api/proxyreceptor?client_name=casProxyReceptor
casProxyReceptor.urlResolver = $relativeUrlResolver
receptorClients = org.pac4j.core.client.Clients
receptorClients.callbackUrl = /api/proxyreceptor?client_name=casProxyReceptor
receptorClients.clients = $casProxyReceptor
receptorClients.urlResolver = $relativeUrlResolver
receptorConfig = org.pac4j.core.config.Config
receptorConfig.clients = $receptorClients
receptorCallbackFilter = io.buji.pac4j.filter.CallbackFilter
receptorCallbackFilter.config = $receptorConfig
casConfig.proxyReceptor = $casProxyReceptor
casLogoutHandler = org.apache.zeppelin.filter.CasLogoutHandler
#Cas client
casConfig.logoutHandler = $casLogoutHandler
casClient = org.pac4j.cas.client.CasClient
casClient.name = indirectCasClient
casClient.configuration = $casConfig
# Access token direct client
tokenClient = io.transwarp.guardian.plugins.shiro.client.DirectAccessTokenClient
tokenClient.name = accessTokenClient
# CAS direct client
casProxyClient = org.pac4j.cas.client.direct.DirectCasProxyClient
casProxyClient.configuration = $casConfig
casProxyClient.name = casProxyClient
casProxyClient.serviceUrl = /
clients = org.pac4j.core.client.Clients
clients.callbackUrl = /api/callback
clients.clients = $casClient, $tokenClient, $casProxyClient
clients.urlResolver = $relativeUrlResolver
config = org.pac4j.core.config.Config
requireRoleAdmin = org.pac4j.core.authorization.authorizer.RequireAnyRoleAuthorizer
requireRoleAdmin.elements = ROLE_ADMIN
j2eSessionã€€= org.pac4j.core.context.session.J2ESessionStore
config.sessionStore = $j2eSession
config.authorizers = admin:$requireRoleAdmin
config.clients = $clients
casSecurityFilter = io.buji.pac4j.filter.SecurityFilter
casSecurityFilter.config = $config
casSecurityFilter.clients = indirectCasClient,accessTokenClient,casProxyClient
callbackFilter = io.buji.pac4j.filter.CallbackFilter
callbackFilter.multiProfile = true
callbackFilter.config = $config
callbackFilter.defaultUrl = /
</#if>
<#else>
[filters]
sessionFilter = org.apache.zeppelin.filter.SessionFilter
sessionFilter.loginUrl=/api/login
# Sample LDAP configuration, for user Authentication, currently tested for single Realm
[main]
pamRealm=org.apache.zeppelin.realm.PamRealm
pamRealm.service=login
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
guardianRealm = org.apache.zeppelin.realm.GuardianRealm
securityManager.realms = <#if service.auth = "kerberos">$guardianRealm<#else>$pamRealm</#if>
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.sessionManager = $sessionManager
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager
securityManager.sessionManager.globalSessionTimeout = 86400000
shiro.loginUrl = /api/login
</#if>
[roles]
role1 = *
role2 = *
role3 = *
admin = *

[urls]
<#if service.auth = "kerberos">
/api/version = anon
/api/CasStatus = anon
/api/proxyreceptor = receptorCallbackFilter
/api/callback = callbackFilter
/api/** = casSecurityFilter
/** = authc
<#else>
/api/CasStatus = anon
/api/version = anon
/api/** = sessionFilter
/** = authc
</#if>
